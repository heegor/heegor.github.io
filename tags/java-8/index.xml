<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java 8 on 保罗札记</title>
    <link>https://www.zengxi.net/tags/java-8/</link>
    <description>Recent content in java 8 on 保罗札记</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Fri, 28 May 2021 18:45:00 +0800</lastBuildDate><atom:link href="https://www.zengxi.net/tags/java-8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java 8新特性 - (8)方法参数反射</title>
      <link>https://www.zengxi.net/2021/05/java8_method_parameter_reflection/</link>
      <pubDate>Fri, 28 May 2021 18:45:00 +0800</pubDate>
      
      <guid>https://www.zengxi.net/2021/05/java8_method_parameter_reflection/</guid>
      <description>方法的参数名，在很多时候我们是需要反射得到的。但是在java8之前，代码编译为class文件后，方法参数的类型是固定的，但参数名称却丢失了，这和动态语言严重依赖参数名称形成了鲜明对比。（java是静态语言，所以入参名称叫什么其实无所谓的）。虽然名称无所谓，但很多时候，我们需要此名称来做更好的安排.
比如mybatis的Dao层接口方法，需要特意用个注解@Param来显示标识出参数名。所以java8来了，带来的新特性解决了这一问题。
获取方法参数名称有3种方法：
采用javassit包获取 很麻烦，参考其他网上文章
通过spring的LocalVariableTableParameterNameDiscoverer 1public static void main(String[] args) { 2 List&amp;lt;String&amp;gt; paramterNames = getParamterName(StaffMark.class, &amp;#34;fun1&amp;#34;); 3 paramterNames.forEach((x) -&amp;gt; System.out.println(x)); 4} 5 6public static void fun1(String aaa, Integer bbb) { 7 8} 9 10public static List&amp;lt;String&amp;gt; getParamterName(Class clazz, String methodName) { 11 LocalVariableTableParameterNameDiscoverer u = new LocalVariableTableParameterNameDiscoverer(); 12 Method[] methods = clazz.getDeclaredMethods(); 13 for (Method method : methods) { 14 if (methodName.equals(method.getName())) { 15 //获取到该方法的参数们 16 String[] params = u.</description>
    </item>
    
    <item>
      <title>Java 8新特性 - (7)泛型的类型推断</title>
      <link>https://www.zengxi.net/2021/05/java8_type_inference/</link>
      <pubDate>Fri, 28 May 2021 18:05:00 +0800</pubDate>
      
      <guid>https://www.zengxi.net/2021/05/java8_type_inference/</guid>
      <description>泛型简介 泛型由Java 1.5引入，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。通俗点将就是“类型的变量”。这种类型变量可以用在类、接口和方法的创建中。理解Java泛型最简单的方法是把它看成一种便捷语法，能节省某些Java类型转换(casting)上的操作.
泛型的最大优点是提供了程序的类型安全同时可以向后兼容，但也有尴尬的地方，就是每次定义时都要写明泛型的类型，这样显示指定不仅感觉有些冗长。Java 7中对泛型做了改进，编译器会根据变量声明时的泛型类型自动推断.
1// Java 7之前的写法 2Map&amp;lt;String, String&amp;gt; myMap = new HashMap&amp;lt;String, String&amp;gt;(); 3 4// Java 7及之后的写法 5Map&amp;lt;String, String&amp;gt; myMap = new HashMap&amp;lt;&amp;gt;(); //注意后面的&amp;#34;&amp;lt;&amp;gt;&amp;#34; 但是，Java 7在创建泛型实例时的类型推断是有限制的：只有构造器的参数化类型在上下文中被显著的声明了，才可以使用类型推断，否则不行。例如：下面的例子在java 7无法正确编译（但在java8里面可以编译，因为根据方法参数来自动推断泛型的类型）：
1List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(); 2list.add(&amp;#34;A&amp;#34;); 3// 由于addAll期望获得Collection&amp;lt;? extends String&amp;gt;类型的参数，因此下面的语句在Java 7中无法编译无法通过 4list.addAll(new ArrayList&amp;lt;&amp;gt;()); Java 8的泛型类型推断改进 java 8里面泛型的目标类型推断主要2个：
 支持通过方法上下文推断泛型目标类型 支持在方法调用链路当中，泛型类型推断传递到最后一个方法  看看官网的例子：
1class List&amp;lt;E&amp;gt; { 2 static &amp;lt;Z&amp;gt; List&amp;lt;Z&amp;gt; nil() { ... }; 3 static &amp;lt;Z&amp;gt; List&amp;lt;Z&amp;gt; cons(Z head, List&amp;lt;Z&amp;gt; tail) { .</description>
    </item>
    
    <item>
      <title>Java 8新特性 - (6)类型注解</title>
      <link>https://www.zengxi.net/2021/05/java8_type_annotation/</link>
      <pubDate>Fri, 28 May 2021 12:48:00 +0800</pubDate>
      
      <guid>https://www.zengxi.net/2021/05/java8_type_annotation/</guid>
      <description>什么是类型注解 在java 8之前，注解只能是在声明的地方所使用，比如类，方法，属性；从java 8开始，注解可以应用在任何地方。但是需要注意的是，类型注解只是语法而不是语义，并不会影响java的编译时间，加载时间，以及运行时间，也就是说，编译成class文件的时候并不包含类型注解。换句话说，仅提供定义这些类型的注释的功能，然后由框架和工具开发者来实际上使用它们。
主要的场景：
 创建类实例：  1new @Interned MyObject(); 类型定义：  1@NotNull String str1 = ... 2@Email String str2 = ... 类型转换：  1myString = (@NonNull String) str; 泛型  1List&amp;lt;@Email String&amp;gt; emails = ... 包括参数边界和通配符边界  1class Folder&amp;lt;F extends @Existing File&amp;gt; { ... } 2Collection&amp;lt;? super @Existing File&amp;gt; c = ... 3List&amp;lt;@Immutable ? extends Comparable&amp;lt;T&amp;gt;&amp;gt; unchangeable = ... instanceof 语句  1boolean isNonNull = myString instanceof @NonNull String; 2boolean isNonBlankEmail = myString instanceof @NotBlank @Email String; 继承  1class UnmodifiableList&amp;lt;T&amp;gt; implements @Readonly List&amp;lt;@Readonly T&amp;gt; { .</description>
    </item>
    
    <item>
      <title>Java 8新特性 - (5)重复注解</title>
      <link>https://www.zengxi.net/2021/05/java8_repeating_annotations/</link>
      <pubDate>Thu, 27 May 2021 10:30:00 +0800</pubDate>
      
      <guid>https://www.zengxi.net/2021/05/java8_repeating_annotations/</guid>
      <description>在JDK8之前，不能使用重复注解的，即某个位置相同注解只能出现一次。
如果想编写一个定时任务的注解，使用者可以配置在每天哪一小时触发，而且允许用户配置多个时间。传统做法是：
1@Target(ElementType.TYPE) 2@Retention(RetentionPolicy.RUNTIME) 3public @interface TraditionalAnnoSchedule { 4 int[] hour() default {0}; 5} 6 7@TraditionalAnnoSchedule(hour = {0, 8, 12}) 8public class Target { 9 public static void main(String[] args) { 10 TraditionalAnnoSchedule[] annotations = Target.class.getAnnotationsByType(TraditionalAnnoSchedule.class); 11 for (TraditionalAnnoSchedule each : annotations) { 12 System.out.println(Arrays.toString(each.hour())); 13 } 14 } 15} 使用JDK8的重复注解特性改造一下。
1@Target(ElementType.TYPE) 2@Retention(RetentionPolicy.RUNTIME) 3public @interface Schedules { 4 Schedule[] value(); 5} 6 7// JDK8新增的@Repeatable 8@Repeatable(Schedules.class) 9public @interface Schedule { 10 int hour() default 0; 11} 12 13@Schedule(hour = 0) 14@Schedule(hour = 8) 15@Schedule(hour = 12) 16public class Target { 17 public static void main(String[] args) { 18 // 推荐的方式 19 Schedule[] annotations = Target.</description>
    </item>
    
    <item>
      <title>Java 8新特性 - (4)默认方法</title>
      <link>https://www.zengxi.net/2021/05/java8_default_method/</link>
      <pubDate>Wed, 26 May 2021 22:40:00 +0800</pubDate>
      
      <guid>https://www.zengxi.net/2021/05/java8_default_method/</guid>
      <description>什么是默认方法 简单说，就是接口可以有实现方法，而且不需要实现类去实现其方法。只需在方法名前面加个default关键字即可。
为什么要有默认方法 首先，之前的接口是个双刃剑，好处是面向抽象而不是面向具体编程，缺陷是，当需要修改接口时候，需要修改全部实现该接口的类，目前的java 8之前的集合框架没有foreach方法，通常能想到的解决办法是在JDK里给相关的接口添加新的方法及实现。然而，对于已经发布的版本，是没法在给接口添加新方法的同时不影响已有的实现。所以引进的默认方法。他们的目的是为了解决接口的修改与现有的实现不兼容的问题。
简单的例子: 一个接口A，Clazz类实现了接口A。
1public interface A { 2 default void foo(){ 3 System.out.println(&amp;#34;Calling A.foo()&amp;#34;); 4 } 5} 6 7public class Clazz implements A { 8 public static void main(String[] args){ 9 Clazz clazz = new Clazz(); 10 clazz.foo();//调用A.foo() 11 } 12} 代码是可以编译的，即使Clazz类并没有实现foo()方法。在接口A中提供了foo()方法的默认实现。
java 8抽象类与接口对比 相同点  都是抽象类型； 都可以有实现方法（以前接口不行）； 都可以不需要实现类或者继承者去实现所有方法，（以前不行，现在接口中默认方法不需要实现者实现）  不同点  抽象类不可以多重继承，接口可以（无论是多重类型继承还是多重行为继承）； 抽象类和接口所反映出的设计理念不同。其实抽象类表示的是&amp;quot;is-a&amp;quot;关系，接口表示的是&amp;quot;like-a&amp;quot;关系； 接口中定义的变量默认是public static final 型，且必须给其初值，所以实现类中不能改变其值；抽象类中的变量默认是 friendly 型，其值可以在子类中重新定义，也可以重新赋值。  多重继承的冲突 观察以下代码，会出现编译错误：
 java: class InterfaceC inherits unrelated defaults for f() from types InterfaceA and InterfaceB</description>
    </item>
    
    <item>
      <title>Java 8新特性 - (3)方法引用</title>
      <link>https://www.zengxi.net/2021/04/java8_method_references/</link>
      <pubDate>Wed, 07 Apr 2021 13:01:00 +0800</pubDate>
      
      <guid>https://www.zengxi.net/2021/04/java8_method_references/</guid>
      <description>方法引用（Method references）。方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。与lambda联合使用，可以使语言的构造更紧凑简洁，减少冗余代码。
方法引用使用到的操作符“::”，这个操作符把方法引用分成两边，左边是类名或者某个对象的引用，右边是方法名。引用方法有下面几种方式：
 对象引用::实例方法名 类名::静态方法名 类名::实例方法名 类名::new 类型[]::new  对象引用::实例方法名 创建了一个PersonCompare对象，调用了其内部的compareByName实例方法。
1public class PersonCompare { 2 public int compareByName(Person a, Person b) { 3 return a.getName().compareTo(b.getName()); 4 } 5 public int compareByAge(Person a, Person b) { 6 return a.getBirthday().compareTo(b.getBirthday()); 7 } 8 @Test 9 public void test(){ 10 Person[] pArr = new Person[]{ 11 new Person(&amp;#34;1&amp;#34;, LocalDate.of(2019, 12, 1)), 12 new Person(&amp;#34;2&amp;#34;, LocalDate.of(2019, 12, 2)), 13 new Person(&amp;#34;3&amp;#34;, LocalDate.</description>
    </item>
    
    <item>
      <title>Java 8新特性 - (2)Stream API</title>
      <link>https://www.zengxi.net/2021/03/java8_stream_api/</link>
      <pubDate>Fri, 05 Mar 2021 12:56:00 +0800</pubDate>
      
      <guid>https://www.zengxi.net/2021/03/java8_stream_api/</guid>
      <description>什么是Stream API Stream API让开发者能够以一种声明的方式处理数据源（集合、数组等），它专注于对数据源进行各种高效的聚合操作（aggregate operation）和大批量数据操作 (bulk data operation)。
Stream API将处理的数据源看做一种Stream（流），Stream（流）在Pipeline（管道）中传输和运算，支持的运算包含筛选、排序、聚合等，当到达终点后便得到最终的处理结果。如果说集合讲的的数据，那么流讲的就是计算！
几个关键概念：
 元素: Stream是一个来自数据源的元素队列，Stream本身并不存储元素。 数据源: 即Stream的来源, 包含集合、数组、I/O channel、generator（发生器）等。 聚合操作: 类似SQL中的filter、map、find、match、sorted等操作 管道运算: Stream在Pipeline中运算后返回Stream对象本身，这样多个操作串联成一个Pipeline，并形成fluent风格的代码。这种方式可以优化操作，如延迟执行(laziness)和短路( short-circuiting)。 内部迭代: 不同于java 8以前对集合的遍历方式（外部迭代），Stream API采用访问者模式（Visitor）实现了内部迭代。 并行运算: Stream API支持串行（stream()）或并行（parallelStream()）的两种操作方式。  特点：
 Stream API的使用和同样是java8新特性的lambda表达式密不可分，可以大大提高编码效率和代码可读性。 Stream API提供串行和并行两种操作，其中并行操作能发挥多核处理器的优势，使用fork/join的方式进行并行操作以提高运行速度。 Stream API进行并行操作无需编写多线程代码即可写出高效的并发程序，且通常可避免多线程代码出错的问题。  注意：
 Stream 自己不会存储元素。 Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。 Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。  Stream操作的三个步骤  创建Stream：一个数据源（如： 集合、数组）， 获取一个流。 中间操作:一个中间操作链，对数据源的数据进行处理。 终止操作(终端操作):一个终止操作，执行中间操作链，并产生结果。  创建Stream (1) 获取Stream Java 8中Collection接口被扩展，提供两种获取流的方法:
 stream() 返回一个顺序流 parallelStream()返回一个并行流  1default Stream stream() // 返回一个顺序流 2 3default Stream parallelStream() // 返回一个并行流 1List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(); 2 3// 顺序流 4Stream&amp;lt;String&amp;gt; stream1 = list.</description>
    </item>
    
    <item>
      <title>Java 8新特性 - (1)Lambda表达式</title>
      <link>https://www.zengxi.net/2021/02/java8_lambda/</link>
      <pubDate>Thu, 25 Feb 2021 13:15:00 +0800</pubDate>
      
      <guid>https://www.zengxi.net/2021/02/java8_lambda/</guid>
      <description>为什么Java需要Lambda表达式? 在函数式编程语言中，函数是一等公民，它们可以独立存在，你可以将其赋值给一个变量，或将他们当做参数传给其他函数。JavaScript是最典型的函数式编程语言。函数式语言提供了一种强大的功能——闭包，相比于传统的编程方法有很多优势，闭包是一个可调用的对象，它记录了一些信息，这些信息来自于创建它的作用域。
Java现在提供的最接近闭包的概念便是Lambda表达式，虽然闭包与Lambda表达式之间存在显著差别，但至少Lambda表达式是闭包很好的替代者。
Lambda表达式为Java添加了缺失的函数式编程特点，它与闭包不同，但是又无限地接近闭包。在支持一类函数的语言中，Lambda 表达式的类型将是函数。但是，在Java中，Lambda表达式是对象，他们必须依附于一类特别的对象类型——函数式接口(functional interface)。
语法 Java中的Lambda表达式通常使用 (argument) -&amp;gt; (body) 语法书写，例如：
1(arg1, arg2...) -&amp;gt; { body } 2 3(type1 arg1, type2 arg2...) -&amp;gt; { body } 下面是一些例子:
1(int a, int b) -&amp;gt; { return a + b; } 2 3() -&amp;gt; System.out.println(&amp;#34;Hello World&amp;#34;); 4 5(String s) -&amp;gt; { System.out.println(s); } 6 7() -&amp;gt; 42 8 9() -&amp;gt; { return 3.1415 }; Lambda表达式的结构:
 一个 Lambda 表达式可以有零个或多个参数 参数的类型既可以明确声明，也可以根据上下文来推断。例如：(int a)与(a)效果相同 所有参数需包含在圆括号内，参数之间用逗号相隔。例如：(a, b) 或 (int a, int b) 或 (String a, int b, float c) 空圆括号代表参数集为空。例如：() -&amp;gt; 42 当只有一个参数，且其类型可推导时，圆括号（）可省略。例如：a -&amp;gt; return a*a Lambda 表达式的主体可包含零条或多条语句 如果 Lambda 表达式的主体只有一条语句，花括号{}可省略。匿名函数的返回类型与该主体表达式一致 如果 Lambda 表达式的主体包含一条以上语句，则表达式必须包含在花括号{}中（形成代码块）。匿名函数的返回类型与代码块的返回类型一致，若没有返回则为空  函数式接口 在Java中，Marker（标记）类型的接口是一种没有方法或属性声明的接口，也就是空接口。相似地，函数式接口是只包含一个抽象方法声明的接口。比如java.</description>
    </item>
    
  </channel>
</rss>
