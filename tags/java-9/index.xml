<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java 9 on 保罗札记</title>
    <link>https://www.zengxi.net/tags/java-9/</link>
    <description>Recent content in java 9 on 保罗札记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Thu, 24 Jun 2021 13:38:00 +0800</lastBuildDate>
    <atom:link href="https://www.zengxi.net/tags/java-9/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java 9新特性 - (5)Optional类中新增几个方法</title>
      <link>https://www.zengxi.net/2021/06/java9_optional_enhancement/</link>
      <pubDate>Thu, 24 Jun 2021 13:38:00 +0800</pubDate>
      <guid>https://www.zengxi.net/2021/06/java9_optional_enhancement/</guid>
      <description>相关文章： Java 8引入Optional类&#xA;Optional 类在 Java 8 中引入，Optional 类的引入很好的解决空指针异常。。在 java 9 中, 添加了三个方法来改进它的功能.&#xA;stream() 方法 语法&#xA;1public Stream&amp;lt;T&amp;gt; stream() stream 方法的作用就是将 Optional 转为一个 Stream，如果该 Optional 中包含值，那么就返回包含这个值的 Stream，否则返回一个空的 Stream（Stream.empty()）。&#xA;实例&#xA;1List&amp;lt;Optional&amp;lt;String&amp;gt;&amp;gt; list = Arrays.asList ( 2 Optional.empty(), 3 Optional.of(&amp;#34;A&amp;#34;), 4 Optional.empty(), 5 Optional.of(&amp;#34;B&amp;#34;)); 6 7//filter the list based to print non-empty values 8//if optional is non-empty, get the value in stream, otherwise return empty 9List&amp;lt;String&amp;gt; filteredList = list.stream() 10 .flatMap(o -&amp;gt; o.</description>
    </item>
    <item>
      <title>Java 9新特性 - (4)统一的JVM日志系统</title>
      <link>https://www.zengxi.net/2021/06/java9_unique_jvm_log/</link>
      <pubDate>Wed, 23 Jun 2021 13:50:00 +0800</pubDate>
      <guid>https://www.zengxi.net/2021/06/java9_unique_jvm_log/</guid>
      <description>Java 9新增了新的命令行选项-Xlog, 用于所有日志记录设置和统一的JVM日志记录&#xA;Xlog的参数遵循以下规则：&#xA;已按照在命令行中显示的顺序应用了多个参数。 最后的配置规则：对于相同的输出，多个参数可以按给定的顺序相互覆盖。 1-Xlog[:option] 2 option := [&amp;lt;what&amp;gt;][:[&amp;lt;output&amp;gt;][:[&amp;lt;decorators&amp;gt;][:&amp;lt;output-options&amp;gt;]]] 3 &amp;#39;help&amp;#39; 4 &amp;#39;disable&amp;#39; 5 what := &amp;lt;selector&amp;gt;[,...] 6 selector := &amp;lt;tag-set&amp;gt;[*][=&amp;lt;level&amp;gt;] 7 tag-set := &amp;lt;tag&amp;gt;[+...] 8 &amp;#39;all&amp;#39; 9 tag := name of tag 10 level := trace 11 debug 12 info 13 warning 14 error 15 output := &amp;#39;stderr&amp;#39; 16 &amp;#39;stdout&amp;#39; 17 [file=]&amp;lt;filename&amp;gt; 18 decorators := &amp;lt;decorator&amp;gt;[,...] 19 &amp;#39;none&amp;#39; 20 decorator := time 21 uptime 22 timemillis 23 uptimemillis 24 timenanos 25 uptimenanos 26 pid 27 tid 28 level 29 tags 30 output-options := &amp;lt;output_option&amp;gt;[,.</description>
    </item>
    <item>
      <title>Java 9新特性 - (3)@SafeVarargs注解支持私有方法</title>
      <link>https://www.zengxi.net/2021/06/java9_safevarargs_enhancement/</link>
      <pubDate>Mon, 21 Jun 2021 16:10:00 +0800</pubDate>
      <guid>https://www.zengxi.net/2021/06/java9_safevarargs_enhancement/</guid>
      <description>Java 7 引入了@SafeVarargs注解来抑制当方法具有varargs（可变数量的参数）时出现的不安全操作警告,比如具有模糊类型（比如：泛型）的可变参数。@SafeVarargs注解只能用于无法覆盖的方法（final方法、static方法或构造函数），因为重写方法仍然可以对其 varargs（可变数量的参数）执行不安全操作。&#xA;Java 9 扩展了@SafeVarargs注解的使用，它现在也可以与私有方法一起使用。这是因为私有方法也是无法覆盖的。&#xA;Java 9 示例 - 当不使用@SafeVarargs注解时&#xA;1import java.util.ArrayList; 2import java.util.List; 3public class JavaExample{ 4 // We are not using @SafeVarargs annotation - Java 9 5 private void print(List... names) { 6 for (List&amp;lt;String&amp;gt; name : names) { 7 System.out.println(name); 8 } 9 } 10 public static void main(String[] args) { 11 JavaExample obj = new JavaExample(); 12 List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;String&amp;gt;(); 13 list.add(&amp;#34;Kevin&amp;#34;); 14 list.</description>
    </item>
    <item>
      <title>Java 9新特性 - (2)匿名内部类与菱形运算符</title>
      <link>https://www.zengxi.net/2021/06/java9_anonymous_inner_class_and_diamond_operator/</link>
      <pubDate>Mon, 21 Jun 2021 15:30:00 +0800</pubDate>
      <guid>https://www.zengxi.net/2021/06/java9_anonymous_inner_class_and_diamond_operator/</guid>
      <description>什么是菱形运算符 菱形操作符是作为 java SE 7 中的新功能引入的。菱形操作符的目的是通过将泛型类型保留在表达式的右侧来避免冗余代码。&#xA;1// Java 7之前的写法 2List&amp;lt;string&amp;gt; myList = new ArrayList&amp;lt;string&amp;gt;(); 3 4// Java 7及之后的写法 5List&amp;lt;string&amp;gt; myList = new ArrayList&amp;lt;&amp;gt;(); Java 7 允许我们在普通类中使用菱形运算符，但它不允许我们在匿名内部类中使用它们。&#xA;1abstract class MyClass&amp;lt;T&amp;gt;{ 2 abstract T add(T num, T num2); 3} 4public class JavaExample { 5 public static void main(String[] args) { 6 MyClass&amp;lt;Integer&amp;gt; obj = new MyClass&amp;lt;&amp;gt;() { 7 Integer add(Integer x, Integer y) { 8 return x+y; 9 } 10 }; 11 Integer sum = obj.</description>
    </item>
    <item>
      <title>Java 9新特性 - (1)接口中的私有方法</title>
      <link>https://www.zengxi.net/2021/06/java9_interface_private_method/</link>
      <pubDate>Fri, 18 Jun 2021 17:22:00 +0800</pubDate>
      <guid>https://www.zengxi.net/2021/06/java9_interface_private_method/</guid>
      <description>在Java 7或更早版本中，一个接口中只能定义如下两种：&#xA;常量 抽象方法 在Java 8中接口引入了默认方法和静态方法。可以在接口中编写方法实现，仅仅需要使用default关键字来定义它们。&#xA;Java 9提供了新的功能,可以在接口中使用private关键字定义私有方法和私有静态方法，这些私有方法的作用是用于改善接口内部的代码可重用性。例如，如果需要两个默认方法来共享代码，则私有接口方法将允许它们共享代码，但不将该私有方法暴露给它的实现类调用。&#xA;截止至Java 9，一个接口中能定义如下几种：&#xA;常量 (Java 7及以前版本支持) 抽象方法 (Java 7及以前版本支持) 默认方法 （Java 8+） 静态方法 （Java 8+） 私有方法 （Java 9+） 私有静态方法 （Java 9+） 可以使用private访问修饰符在接口中编写私有方法。在接口中使用私有方法有四个规则：&#xA;接口中private方法不能是abstract抽象方法。因为abstract抽象方法是公开的用于给接口实现类实现的方法，所以不能是private。 接口中私有方法只能在接口内部的方法里面被调用。 接口中私有静态方法可以在其他静态和非静态接口方法中使用。 接口中私有非静态方法不能在私有静态方法内部使用。 1interface CustomInterface { 2 3 public abstract void abstractMethod(); //抽象方法不能是私有的 4 5 public default void defaultMethod() { 6 privateMethod(); //可以调用接口中的私有方法 7 privateStaticMethod(); //可以调用接口中的私有静态方法 8 System.out.println(&amp;#34;普通方法被调用&amp;#34;); 9 } 10 11 public static void staticMethod() { 12 privateStaticMethod(); //public静态方法可以调用private静态方法 13 System.</description>
    </item>
  </channel>
</rss>
