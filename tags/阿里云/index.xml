<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>阿里云 on 保罗札记</title>
    <link>https://www.zengxi.net/tags/%E9%98%BF%E9%87%8C%E4%BA%91/</link>
    <description>Recent content in 阿里云 on 保罗札记</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Thu, 17 Jun 2021 16:28:00 +0800</lastBuildDate><atom:link href="https://www.zengxi.net/tags/%E9%98%BF%E9%87%8C%E4%BA%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>阿里云WAF与SNI问题</title>
      <link>https://www.zengxi.net/2021/06/aliyun_waf_sni/</link>
      <pubDate>Thu, 17 Jun 2021 16:28:00 +0800</pubDate>
      
      <guid>https://www.zengxi.net/2021/06/aliyun_waf_sni/</guid>
      <description>什么是SNI 当多个网站托管在一台服务器上并共享一个IP地址，并且每个网站都有自己的SSL证书，在客户端设备尝试安全地连接到其中一个网站时，服务器可能不知道显示哪个SSL证书。这是因为SSL/TLS握手发生在客户端设备通过HTTP指示连接到某个网站之前。这个有点像邮寄包裹到公寓楼而不是独栋房子。将邮件邮寄到某人的独栋房子时，仅街道地址就足以将包裹发送给收件人。但是，当包裹进入公寓楼时，除了街道地址外，还需要公寓号码。否则，包裹可能无法送达收件人或根本无法交付。
服务器名称指示（SNI，Server Name Indication）旨在解决此问题。 SNI是TLS协议（以前称为SSL协议）的扩展，该协议在HTTPS中使用。它包含在TLS/SSL握手流程中，以确保客户端设备能够看到他们尝试访问的网站的正确SSL证书。该扩展使得可以在TLS握手期间指定网站的主机名或域名，而不是在握手之后打开HTTP连接时指定。
SNI在2003年被添加为TLS/SSL的扩展；它最初不是协议的一部分。几乎所有的浏览器、操作系统和Web服务器都支持它，除了一些仍在使用的最旧的浏览器和操作系统。如果客户端或者浏览器不支持SNI，用户可能无法访问某些网站，将返回错误消息，例如&amp;quot;您的连接缺乏安全隐私。&amp;quot;
阿里云WAF对于SNI的支持 如下图，阿里云WAF支持多配置多个域名，并根据用户请求来返回对应域名的证书。同时阿里云有个默认证书，当无法确定证书的时候，就返回默认的证书。
对于共享型的WAF，默认返回的是阿里云的SSL证书；对于独享型的WAF，用户可以在控制台配置默认的证书。
这个对to-B的系统来说，会有一定的挑战。如果对方企业用的是比较老的SAP版本，可能http客户端不支持SNI，这样的话，共享版的WAF会返回默认的阿里云证书，客户端验证证书时候会报错。这种情况，可能就只能选择独享版WAF，毕竟用户可以自定义默认证书，将默认证书设置成所需要的证书即可。
另外，在更新SSL证书的时候，如果使用的是独享版WAF，除了更新所配置域名的证书以外，也要更新默认的证书。否则，由于旧的默认证书过期，对于不支持SNI的客户端，会出现验证证书的错误。
SNI兼容性 SNI支持以下桌面版浏览器：
 Chrome 5及以上版本 Chrome 6及以上版本（Windows XP） Firefox 2及以上版本 IE 7及以上版本（运行在Windows Vista/Server 2008及以上版本系统中，在XP系统中任何版本的IE浏览器都不支持SNI） Konqueror 4.7及以上版本 Opera 8及以上版本 Safari 3.0 on Windows Vista/Server 2008及以上版本，Mac OS X 10.5.6 及以上版本  SNI支持以下库：
 GNU TLS Java 7及以上版本，仅作为客户端 HTTP client 4.3.2及以上版本 libcurl 7.18.1及以上版本 NSS 3.1.1及以上版本 OpenSSL 0.9.8j及以上版本 OpenSSL 0.9.8f及以上版本，需配置flag Qt 4.8及以上版本 Python3、Python 2.7.9及以上版本  SNI支持以下手机端浏览器：
 Android Browser on 3.0 Honeycomb及以上版本 iOS Safari on iOS 4及以上版本 Windows Phone 7及以上版本  SNI支持以下服务器：</description>
    </item>
    
    <item>
      <title>terraform中阿里云ECS ssh key变化问题</title>
      <link>https://www.zengxi.net/2020/07/terraform_aliyun_ecs_ssh_key/</link>
      <pubDate>Thu, 23 Jul 2020 06:05:31 +0000</pubDate>
      
      <guid>https://www.zengxi.net/2020/07/terraform_aliyun_ecs_ssh_key/</guid>
      <description>目前的terraform脚本中，在新建阿里云ECS的时候，会通过 user_data 属性值来设定初始的ssh key。但是这个就存在一个隐患，如果将来想要改变初始的ssh key，再用terraform来推机器的时候，terraform发现user_data属性值发生变化，会删除现有的ECS并重建。
解决的方法是，修改ECS的lifecycle，将user_data添加到忽略列表中。这样terraform就可以忽略掉该属性值的变化。
1{ 2 resource &amp;#34;alicloud_instance&amp;#34; &amp;#34;test_instance&amp;#34; { 3 ... 4 5 lifecycle { 6 ignore_changes = [&amp;#34;user_data&amp;#34;] 7 } 8 } 9} </description>
    </item>
    
    <item>
      <title>解决terraform与远程云服务器资源状态不一致的问题</title>
      <link>https://www.zengxi.net/2020/07/terraform_state_consistent/</link>
      <pubDate>Wed, 22 Jul 2020 14:37:54 +0000</pubDate>
      
      <guid>https://www.zengxi.net/2020/07/terraform_state_consistent/</guid>
      <description>概述 在运维过程中遇到了下面的情况：长期使用terraform管理资源，但是通过terraform以外的工具对云资源做过属性变更（比如通过网页上的控制台对云资源做属性变更）。此时，云资源的属性与terraform state的信息已经不一致，跑terraform plan就会发现，它会删除现有的，然后重建一个。但是这个是我们不希望看到的，我们希望可以保留原有实例并且把本地的terraform state更新成最新的属性。
解决方案 要想解决这个问题，可以利用 terraform import 命令。也就是重新导入云资源的实例，然后同步成最新的信息。
下面以阿里云ECS为例子。
(1)删除 state 中的现有资源 如果该资源受 terraform 管理，则需要先把它删除。执行下面的命令
1# 基于当前的tf文件，初始化 state 文件 2terraform init 3 4# 列出当前的state文件所有管理的项目清单 5terraform state list 6 7# 根据上面的输出，找到对应的项目的名称。通过rm删除, 下面假设项目名称是 alicloud_instance.testecs 8terraform state rm alicloud_instance.testecs (2)在阿里云控制台获取实例ID 登录阿里云网页上的控制台，获取所要导入的实例 ID
(3)tf 文件中添加实例的定义 保证本地的tf文件中有该实例资源的相关定义。如果没有，则可以用下面的方式在文件中新增内容。
如果是以resource模式定义，则添加下面内容，直接留空即可，其余的数据在后续步骤中可以补全
1resource &amp;#34;alicloud_instance&amp;#34; &amp;#34;testecs&amp;#34; {} 如果是以模块方式来定义，则添加下面内容，其余的数据在后续步骤中可以补全
1module &amp;#34;testmodule&amp;#34; { 2 source = &amp;#34;../modules/instance&amp;#34; 3 environment = &amp;#34;xxx&amp;#34; 4 vswitch_info = &amp;#34;xxxx&amp;#34; 5 vpc_id = &amp;#34;xxxx&amp;#34; 6 instance_type = &amp;#34;xxxx&amp;#34; 7 security_groups = &amp;#34;xxxx&amp;#34; 8 service = &amp;#34;xxxx&amp;#34; 9 instance_count = &amp;#34;xxxxx&amp;#34; 10 system_disk_size = &amp;#34;xxxxx&amp;#34; 11 system_disk_category = &amp;#34;xxxxx&amp;#34; 12 alicloud_availability_zones = &amp;#34;xxxxx&amp;#34; 13} ​</description>
    </item>
    
  </channel>
</rss>
