<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>保罗札记 – 性能优化</title>
    <link>http://localhost:1313/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
    <description>Recent content in 性能优化 on 保罗札记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 20 Feb 2021 13:12:00 +0800</lastBuildDate>
    
	  <atom:link href="http://localhost:1313/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>订单ES查询性能优化</title>
      <link>http://localhost:1313/blog/2021/02/es_search_improvement/</link>
      <pubDate>Sat, 20 Feb 2021 13:12:00 +0800</pubDate>
      
      <guid>http://localhost:1313/blog/2021/02/es_search_improvement/</guid>
      <description>
        
        
        &lt;h2&gt;背景&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;背景&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e8%83%8c%e6%99%af&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;由于系统中的订单量大，一些查询语句需要级联多张表来查询，单纯靠数据库的索引已经无法满足查询速度与用户界面响应速度的要求，因此在5年前引入了ES来加快查询速度。但是，原先的方案中ES存放的是全量的订单数据，并且是存放在同一个数据库索引中，随着业务的发展与订单量的累积，ES查询的速度已经越来越慢。通过Grafana监控数据，可以看到单个索引的数据量已达到1.5TB，主要的性能指标越来越差。ES的CPU使用率不时地大于80%，甚至100%，导致极端情况下ES查询耗时十几秒。对于用户的直观感受就是，在界面上面查询数据，需要耗时很久才能看到数据。&lt;/p&gt;
&lt;h2&gt;解决方案&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;解决方案&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;系统总是慢慢演变的，某个时间点的解决方案都是基于当前的一些情况，满足近3年内的需求就足够了。考虑到成本问题，尽可能在不增加硬件投入的情况下，找到节省时间的优化方案。&lt;/p&gt;
&lt;p&gt;在原先的方案中，索引中有1.5TB的数据量。从1.5TB的数据集里面查找数据，会很耗时间。由于系统中大部分的操作都是根据公司来区分的，所以如果把ES里面的数据，按照公司来拆分成不同的索引，某个公司查询订单的时候，仅仅查询它自己公司的索引。拆分成若干个索引之后，最大的一个索引不到3GB，小的一些索引就100多MB。由于单个公司索引的数据量很小，查询速度自然就比原先快了。&lt;/p&gt;
&lt;p&gt;系统中也存在一些查询，需要跨公司来查数据，但是这些查询有个特点，它们仅仅需要查最近一定时间范围内的数据，比如半年之内。对于这些数据，可以再专门建一个ES索引来存放，同时有个后台的Job，定期删除过期的数据。这样，就可以控制该索引的总数据量在一定的范围之内，不会因为数据量多大的原因导致查询变慢。&lt;/p&gt;
&lt;p&gt;当然，在写代码实现的时候还需要考虑很多具体的问题，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改原先ES数据实时同步方案，支持根据公司ID写入到不同的索引&lt;/li&gt;
&lt;li&gt;修改原先ES数据全量加载方案，支持根据公司ID写入到不同的索引&lt;/li&gt;
&lt;li&gt;修改原先ES数据查询方案，支持根据公司ID从不同的索引读取数据&lt;/li&gt;
&lt;li&gt;修改ES查询相关设置参数的实现逻辑，比如某个公司是否开启ES，开启ES的走ES查询，不开启ES的走数据库查询。&lt;/li&gt;
&lt;li&gt;需要考虑到将来的扩展性，如何更合理的接口&lt;/li&gt;
&lt;li&gt;原先的java ES库的某些操作不支持显式指定index名称，需要继承该库中的一些类并重写方法&lt;/li&gt;
&lt;li&gt;在过渡阶段，让系统支持新旧两种的查询方式，不需要重启服务，仅通过修改配置就可以实现无缝切换。这样的话，如果由于新方案中，代码有bug，可以直接通过修改配置切换到旧的方式，bug修复后再切换成新的。等到新方案的上线一定的时间，稳定之后，再移除旧方案的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;优化前后的性能对比&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;优化前后的性能对比&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e4%bc%98%e5%8c%96%e5%89%8d%e5%90%8e%e7%9a%84%e6%80%a7%e8%83%bd%e5%af%b9%e6%af%94&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;通过Grafana的监控数据，可以很明显地看出优化的效果。&lt;/p&gt;
&lt;h3&gt;切换新旧方案的瞬间&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;切换新旧方案的瞬间&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%88%87%e6%8d%a2%e6%96%b0%e6%97%a7%e6%96%b9%e6%a1%88%e7%9a%84%e7%9e%ac%e9%97%b4&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;切换新旧方案的瞬间，可以看到查询耗时断崖式减少&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/p/2021/02/turn-on-es.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;平峰时期CPU使用率对比&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;平峰时期cpu使用率对比&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%b9%b3%e5%b3%b0%e6%97%b6%e6%9c%9fcpu%e4%bd%bf%e7%94%a8%e7%8e%87%e5%af%b9%e6%af%94&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;优化前平均40%左右&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/p/2021/02/before_es_cpu_regular_time.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;优化后平均5%&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/p/2021/02/after_es_cpu_regular_time.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;高峰时期CPU使用率对比&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;高峰时期cpu使用率对比&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e9%ab%98%e5%b3%b0%e6%97%b6%e6%9c%9fcpu%e4%bd%bf%e7%94%a8%e7%8e%87%e5%af%b9%e6%af%94&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;优化前平均82%，最高98%&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/p/2021/02/before_es_cpu_peak_time.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;优化后平均15%&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/p/2021/02/after_es_cpu_peak_time.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;平峰时期查询耗时对比&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;平峰时期查询耗时对比&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%b9%b3%e5%b3%b0%e6%97%b6%e6%9c%9f%e6%9f%a5%e8%af%a2%e8%80%97%e6%97%b6%e5%af%b9%e6%af%94&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;优化前平均3.2s&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/p/2021/02/before_es_query_regular_time.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;优化后9ms&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/p/2021/02/after_es_query_regular_time.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;高峰时期查询耗时对比&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;高峰时期查询耗时对比&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e9%ab%98%e5%b3%b0%e6%97%b6%e6%9c%9f%e6%9f%a5%e8%af%a2%e8%80%97%e6%97%b6%e5%af%b9%e6%af%94&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;优化前平均7.8s，最高13.24s&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/p/2021/02/before_es_query_peak_time.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;优化后平均32ms&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/p/2021/02/after_es_query_peak_time.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
