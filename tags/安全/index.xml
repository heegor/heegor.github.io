<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>安全 on 保罗札记</title>
    <link>https://www.zengxi.net/tags/%E5%AE%89%E5%85%A8/</link>
    <description>Recent content in 安全 on 保罗札记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Tue, 09 Jan 2024 21:01:00 +0800</lastBuildDate>
    <atom:link href="https://www.zengxi.net/tags/%E5%AE%89%E5%85%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>通过SpringGateway对接口请求进行加解密</title>
      <link>https://www.zengxi.net/2024/01/gateway-modify-request-response/</link>
      <pubDate>Tue, 09 Jan 2024 21:01:00 +0800</pubDate>
      <guid>https://www.zengxi.net/2024/01/gateway-modify-request-response/</guid>
      <description>有个需求，要求在前端调用接口时，将请求数据与响应数据做加密。做了一下调研，可以用下面的方式来实现：&#xA;1public class EncryptGatewayFilter implements GlobalFilter, Ordered { 2 3 private static final String BODY_ENCRYPT_HEADER = &amp;#34;X-ENCRYPTED&amp;#34;; 4 private static final String ENCRYPT_VERSION_1 = &amp;#34;1.0&amp;#34;; 5 6 @Override 7 public int getOrder() { 8 return -99; 9 } 10 11 @Override 12 public Mono&amp;lt;Void&amp;gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) { 13 // 请求头中标识了该请求是加密过的 14 HttpHeaders httpHeaders = exchange.getRequest().getHeaders(); 15 String bodyEncryptHeader = httpHeaders.getFirst(BODY_ENCRYPT_HEADER); 16 17 if (bodyEncryptHeader != null &amp;amp;&amp;amp; bodyEncryptHeader.equals(ENCRYPT_VERSION_1)) { 18 // 这里可以处理一些自定义的逻辑，并且将参数传到后续的方法中 19 CustomParam step1Param = this.</description>
    </item>
    <item>
      <title>不安全的http方法</title>
      <link>https://www.zengxi.net/2023/12/unsafe_http_methods/</link>
      <pubDate>Mon, 25 Dec 2023 21:45:00 +0800</pubDate>
      <guid>https://www.zengxi.net/2023/12/unsafe_http_methods/</guid>
      <description>在安全扫描工具中，会验证服务器是否开启了不安全的 http 方法。&#xA;从资源的角度看，GET、HEAD、OPTIONS、TRACE，这些方法不会产生什么动作，不会在服务器上产生结果，只是简单获取信息。相对的，能产生动作的方法就会被认为是不安全的HTTP方法。&#xA;在上面认为的那些不安全的HTTP方法中，安全界认为 PUT、DELETE、TRACE 是不安全的，另外 WebDAV 中的几个方法，RFC 5789 中的 PATCH 方法也被认为是不安全的。（TRACE容易引发XST攻击，PATCH修改资源的部分内容，PUT/DELETE没有认证机制等原因，不仅仅因为它们会产生结果）。&#xA;下面的方法可能会被利用，向应用程序实施有效攻击：&#xA;PUT：利用PUT方法可以向服务器上传文件，所以恶意攻击者可以上传木马等恶意文件。 DELETE：利用DELETE方法可以删除服务器上特定的资源文件，造成恶意攻击。 OPTIONS：将会造成服务器信息暴露，如中间件版本、支持的HTTP方法等。 TRACE：可以回显服务器收到的请求，主要用于测试或诊断，一般都会存在反射型跨站漏洞 COPY：将指定的资源复制到Destination消息头指定的位置 MOVE：将指定的资源移动到Destination消息头指定的位置 SEARCH：在一个目录路径中搜索资源 PROPFIND：获取与指定资源有关的信息，如作者、大小与内容类型 如果没有必要，最好关闭这些不安全的 HTTP 方法和 WebDAV。&#xA;参考链接：&#xA;https://developer.aliyun.com/article/790150 https://cloud.tencent.com/developer/article/1937077 https://www.cnblogs.com/qmfsun/p/6169641.html https://noob-sec.github.io/%E6%AF%8F%E6%97%A5%E6%BC%8F%E6%B4%9E-%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84HTTP%E6%96%B9%E6%B3%95/ </description>
    </item>
  </channel>
</rss>
