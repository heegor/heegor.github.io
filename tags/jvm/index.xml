<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>保罗札记 – Jvm</title>
    <link>http://localhost:1313/tags/jvm/</link>
    <description>Recent content in Jvm on 保罗札记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 07 Dec 2023 20:45:00 +0800</lastBuildDate>
    
	  <atom:link href="http://localhost:1313/tags/jvm/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>JVM 参数项区别：-D、-X、-XX</title>
      <link>http://localhost:1313/blog/2023/12/jvm-args/</link>
      <pubDate>Thu, 07 Dec 2023 20:45:00 +0800</pubDate>
      
      <guid>http://localhost:1313/blog/2023/12/jvm-args/</guid>
      <description>
        
        
        &lt;p&gt;JVM 包含多种不同类型的参数选项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-D 用来设置系统属性，属于标准选项&lt;/li&gt;
&lt;li&gt;-X 设置非标准选项，支持的选项范围跟具体的 JVM 实现有关&lt;/li&gt;
&lt;li&gt;-XX 设置高级选项，允许开发者调整 JVM 的行为、性能、输出调试信息，支持的选项范围也跟具体的 JVM 实现有关&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;标准选项（standard options）-D&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;标准选项standard-options-d&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e6%a0%87%e5%87%86%e9%80%89%e9%a1%b9standard-options-d&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;标准选项是所有 JVM 实现都会支持。在控制台输入 &lt;code&gt;java&lt;/code&gt; 这个命令，除了能看到 java 命令的使用手册，还能看到机器上默认的 JVM 所支持的所有标准选项。&lt;/p&gt;
&lt;p&gt;Java 允许我们以 -D&lt;name&gt;=&lt;value&gt; 这种键值对的形式设置系统属性。注意，这个不是环境变量。&lt;/p&gt;
&lt;p&gt;可以在命令行中带入参数:&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;-Dfoo=bar1&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;也可以在java代码中，设置或者读取值&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 设置值&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getProperty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 读取值&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setProperty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;bar2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;h2&gt;非标准选项（non-standard options，或者 extra-options） -X&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;非标准选项non-standard-options或者-extra-options--x&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e9%9d%9e%e6%a0%87%e5%87%86%e9%80%89%e9%a1%b9non-standard-options%e6%88%96%e8%80%85-extra-options--x&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;和标准选项类似，可以直接通过 &lt;code&gt;java -X&lt;/code&gt; 命令获取 JVM 支持的所有非标准选项。比如下面两个最常见的选项：-Xms&lt;size&gt; 和 -Xmx&lt;size&gt;&lt;/p&gt;
&lt;p&gt;非标准选项的支持是与 JVM 的具体实现紧密相关的，并且它们在不同的版本可能会发生改变。&lt;/p&gt;
&lt;h2&gt;高级选项（advanced options）-XX&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;高级选项advanced-options-xx&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e9%ab%98%e7%ba%a7%e9%80%89%e9%a1%b9advanced-options-xx&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;高级选项以 -XX 开头，这些选项一般用于开发者调整 JVM 的行为、性能或输出调试信息等。&lt;/p&gt;
&lt;p&gt;根据参数值类型的不同，高级选项又可以分为两类：布尔类型的选项和带参数的选项。&lt;/p&gt;
&lt;h3&gt;(1) 布尔选项&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;1-布尔选项&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#1-%e5%b8%83%e5%b0%94%e9%80%89%e9%a1%b9&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;布尔类型的选项不带参数，只是一个开关。开关是不需要参数的，可以通过 &lt;code&gt;+&lt;/code&gt; 启用某个功能（-XX:+Option），而通过 &lt;code&gt;-&lt;/code&gt; 禁用某个功能（-XX:-Option）。&lt;/p&gt;
&lt;p&gt;例如，在 HotSpot JVM 中，通过 &lt;code&gt;-XX:+Inline&lt;/code&gt; 启用方法内联。不过 HotSpot 为了提高性能，默认是开启了方法内联的，所以可以通过 &lt;code&gt;-XX:-Inline&lt;/code&gt; 关闭方法内联。&lt;/p&gt;
&lt;h3&gt;(2) 带参选项&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;2-带参选项&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#2-%e5%b8%a6%e5%8f%82%e9%80%89%e9%a1%b9&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;还有一类高级选项是需要设置相应的参数值的，形式一般为：-XX:OptionName=OptionValue。&lt;/p&gt;
&lt;p&gt;下面是一些例子：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;-XX:ErrorFile=file.log 告诉 JVM：当不可恢复的错误发生时，将错误信息写入 file.log 这个文件。
-XX:TreadStackSize=256k 将线程栈的大小设置为 256k。
-XX:MaxHeapSize=1g 将堆的最大大小限制为 1GB，等价于 -Xmx1g&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;使用 &lt;code&gt;java -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+PrintFlagsFinal -version&lt;/code&gt; 命令可以查看 JVM 所有的选项&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/638545993&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://zhuanlan.zhihu.com/p/638545993&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Java 8新特性 - (14)Hotspot删除永久代</title>
      <link>http://localhost:1313/blog/2021/06/java8_hotspot_remove_permgen/</link>
      <pubDate>Tue, 22 Jun 2021 12:58:00 +0800</pubDate>
      
      <guid>http://localhost:1313/blog/2021/06/java8_hotspot_remove_permgen/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2&gt;JDK 6、JDK 7、JDK 8 内存模型演变&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;jdk-6jdk-7jdk-8-内存模型演变&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#jdk-6jdk-7jdk-8-%e5%86%85%e5%ad%98%e6%a8%a1%e5%9e%8b%e6%bc%94%e5%8f%98&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/p/2021/06/java8_hotspot_remove_permgen_1.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这些版本的JVM内存模型主要有以下差异：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JDK 6：有永久代，静态变量存放在永久代上。&lt;/li&gt;
&lt;li&gt;JDK 7：有永久代，但已经把字符串常量池、静态变量，存放在堆上。逐渐地减少永久代的使用。&lt;/li&gt;
&lt;li&gt;JDK 8：无永久代，运行时常量池、类常量池，都保存在元数据区，也就是常说的元空间。但字符串常量池仍然存放在堆上。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;内存模型各区域概要&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;内存模型各区域概要&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%86%85%e5%ad%98%e6%a8%a1%e5%9e%8b%e5%90%84%e5%8c%ba%e5%9f%9f%e6%a6%82%e8%a6%81&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;程序计数器&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;程序计数器&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e7%a8%8b%e5%ba%8f%e8%ae%a1%e6%95%b0%e5%99%a8&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;较小的内存空间、线程私有，记录当前线程所执行的字节码行号。&lt;/li&gt;
&lt;li&gt;如果执行 Java 方法，计数器记录虚拟机字节码当前指令的地址，本地方法则为空。&lt;/li&gt;
&lt;li&gt;这一块区域没有任何 OutOfMemoryError 定义。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Java虚拟机栈&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;java虚拟机栈&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#java%e8%99%9a%e6%8b%9f%e6%9c%ba%e6%a0%88&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;每一个方法在执行的同时，都会创建出一个栈帧，用于存放局部变量表、操作数栈、动态链接、方法出口、线程等信息。&lt;/li&gt;
&lt;li&gt;方法从调用到执行完成，都对应着栈帧从虚拟机中入栈和出栈的过程。&lt;/li&gt;
&lt;li&gt;最终，栈帧会随着方法的创建到结束而销毁。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;本地方法栈&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;本地方法栈&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e6%9c%ac%e5%9c%b0%e6%96%b9%e6%b3%95%e6%a0%88&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;本地方法栈与Java虚拟机栈作用类似，唯一不同的就是本地方法栈执行的是Native方法，而虚拟机栈是为JVM执行Java方法服务的。&lt;/li&gt;
&lt;li&gt;与 Java 虚拟机栈一样，本地方法栈也会抛出 StackOverflowError 和 OutOfMemoryError 异常。&lt;/li&gt;
&lt;li&gt;Java 8 HotSpot虚拟机直接就把本地方法栈和虚拟机栈合二为一。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;堆和元空间&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;堆和元空间&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%a0%86%e5%92%8c%e5%85%83%e7%a9%ba%e9%97%b4&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/p/2021/06/java8_hotspot_remove_permgen_2.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Java 8 JVM 的内存结构主要由三大块组成：堆内存、元空间和栈，Java 堆是内存空间占据最大的一块区域。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java 堆，由年轻代和年老代组成，分别占据1/3和2/3。&lt;/li&gt;
&lt;li&gt;而年轻代又分为三部分，Eden、From Survivor、To Survivor，占据比例为8:1:1，可调。&lt;/li&gt;
&lt;li&gt;这里特意画出了元空间，也就是直接内存区域。在 Java 8 之后就不在堆上分配方法区了。&lt;/li&gt;
&lt;li&gt;元空间从虚拟机Java堆中转移到本地内存，默认情况下，元空间的大小仅受本地内存的限制，说白了也就是以后不会因为永久代空间不够而抛出OOM异常出现了。Java 8以前版本的 class和JAR包数据存储在 PermGen下面 ，PermGen 大小是固定的，而且项目之间无法共用，公有的 class，所以比较容易出现OOM异常。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;常量池&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;常量池&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%b8%b8%e9%87%8f%e6%b1%a0&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;从 Java 7开始把常量池从永久代中剥离，直到 Java 8 去掉了永久代。而字符串常量池一直放在堆空间，用于存储字符串对象，或是字符串对象的引用。&lt;/p&gt;
&lt;h2&gt;为什么废弃永久代（PermGen）&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;为什么废弃永久代permgen&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e4%b8%ba%e4%bb%80%e4%b9%88%e5%ba%9f%e5%bc%83%e6%b0%b8%e4%b9%85%e4%bb%a3permgen&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;参照官方说明 JEP122：http://openjdk.java.net/jeps/122：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Motivation
This is part of the JRockit and Hotspot convergence effort. JRockit customers do not need to configure the permanent generation (since JRockit does not have a permanent generation) and are accustomed to not configuring the permanent generation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即：移除永久代是为融合HotSpot JVM与 JRockit VM而做出的努力，因为JRockit没有永久代，不需要配置永久代。&lt;/p&gt;
&lt;p&gt;同时，在实际使用过程中，由于永久代内存经常不够用或发生内存泄露，容易爆出异常java.lang.OutOfMemoryError: PermGen。这里的 “PermGen space”其实指的就是方法区。不过方法区和“PermGen space”又有着本质的区别。前者是 JVM 的规范，而后者则是 JVM 规范的一种实现，并且只有 HotSpot 才有 “PermGen space”，而对于其他类型的虚拟机，如 JRockit（Oracle）、J9（IBM） 并没有“PermGen space”。由于方法区主要存储类的相关信息，所以对于动态生成类的情况比较容易出现永久代的内存溢出。&lt;/p&gt;
&lt;h2&gt;深入理解元空间（Metaspace）&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;深入理解元空间metaspace&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3%e5%85%83%e7%a9%ba%e9%97%b4metaspace&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;元空间的内存大小&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;元空间的内存大小&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%85%83%e7%a9%ba%e9%97%b4%e7%9a%84%e5%86%85%e5%ad%98%e5%a4%a7%e5%b0%8f&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;元空间是方法区的在HotSpot jvm 中的实现，方法区主要用于存储类的信息、常量池、方法数据、方法代码等。方法区逻辑上属于堆的一部分，但是为了与堆进行区分，通常又叫“非堆”。&lt;/p&gt;
&lt;p&gt;元空间的本质和永久代类似，都是对JVM规范中方法区的实现。不过元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。，理论上取决于32位/64位系统可虚拟的内存大小。可见也不是无限制的，需要配置参数。&lt;/p&gt;
&lt;h3&gt;常用配置参数&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;常用配置参数&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%b8%b8%e7%94%a8%e9%85%8d%e7%bd%ae%e5%8f%82%e6%95%b0&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;MetaspaceSize&lt;br&gt;
初始化的Metaspace大小，控制元空间发生GC的阈值。GC后，动态增加或降低MetaspaceSize。在默认情况下，这个值大小根据不同的平台在12M到20M浮动。使用&lt;code&gt;Java -XX:+PrintFlagsInitial&lt;/code&gt;命令查看本机的初始化参数&lt;/li&gt;
&lt;li&gt;MaxMetaspaceSize&lt;br&gt;
限制Metaspace增长的上限，防止因为某些情况导致Metaspace无限的使用本地内存，影响到其他程序。在本机上该参数的默认值为4294967295B（大约4096MB）。&lt;/li&gt;
&lt;li&gt;MinMetaspaceFreeRatio&lt;br&gt;
当进行过Metaspace GC之后，会计算当前Metaspace的空闲空间比，如果空闲比小于这个参数（即实际非空闲占比过大，内存不够用），那么虚拟机将增长Metaspace的大小。默认值为40，也就是40%。设置该参数可以控制Metaspace的增长的速度，太小的值会导致Metaspace增长的缓慢，Metaspace的使用逐渐趋于饱和，可能会影响之后类的加载。而太大的值会导致Metaspace增长的过快，浪费内存。&lt;/li&gt;
&lt;li&gt;MaxMetasaceFreeRatio&lt;br&gt;
当进行过Metaspace GC之后， 会计算当前Metaspace的空闲空间比，如果空闲比大于这个参数，那么虚拟机会释放Metaspace的部分空间。默认值为70，也就是70%。&lt;/li&gt;
&lt;li&gt;MaxMetaspaceExpansion&lt;br&gt;
Metaspace增长时的最大幅度。在本机上该参数的默认值为5452592B（大约为5MB）。&lt;/li&gt;
&lt;li&gt;MinMetaspaceExpansion&lt;br&gt;
Metaspace增长时的最小幅度。在本机上该参数的默认值为340784B（大约为330KB）。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/paddix/p/5309550.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.cnblogs.com/paddix/p/5309550.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/dennyzhangdd/p/6770188.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.cnblogs.com/dennyzhangdd/p/6770188.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000038862239&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://segmentfault.com/a/1190000038862239&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
