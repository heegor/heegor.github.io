<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>optional on 保罗札记</title>
    <link>https://www.zengxi.net/tags/optional/</link>
    <description>Recent content in optional on 保罗札记</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Thu, 24 Jun 2021 13:38:00 +0800</lastBuildDate><atom:link href="https://www.zengxi.net/tags/optional/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java 9新特性 - (5)Optional类中新增几个方法</title>
      <link>https://www.zengxi.net/2021/06/java9_optional_enhancement/</link>
      <pubDate>Thu, 24 Jun 2021 13:38:00 +0800</pubDate>
      
      <guid>https://www.zengxi.net/2021/06/java9_optional_enhancement/</guid>
      <description>相关文章： Java 8引入Optional类
 Optional 类在 Java 8 中引入，Optional 类的引入很好的解决空指针异常。。在 java 9 中, 添加了三个方法来改进它的功能.
stream() 方法 语法
1public Stream&amp;lt;T&amp;gt; stream() stream 方法的作用就是将 Optional 转为一个 Stream，如果该 Optional 中包含值，那么就返回包含这个值的 Stream，否则返回一个空的 Stream（Stream.empty()）。
实例
1List&amp;lt;Optional&amp;lt;String&amp;gt;&amp;gt; list = Arrays.asList ( 2 Optional.empty(), 3 Optional.of(&amp;#34;A&amp;#34;), 4 Optional.empty(), 5 Optional.of(&amp;#34;B&amp;#34;)); 6 7//filter the list based to print non-empty values 8//if optional is non-empty, get the value in stream, otherwise return empty 9List&amp;lt;String&amp;gt; filteredList = list.stream() 10 .</description>
    </item>
    
    <item>
      <title>Java 8新特性 - (15)Optional类</title>
      <link>https://www.zengxi.net/2021/06/java8_optional/</link>
      <pubDate>Thu, 24 Jun 2021 12:59:00 +0800</pubDate>
      
      <guid>https://www.zengxi.net/2021/06/java8_optional/</guid>
      <description>相关文章： Java 9对Optional类的改进
 Java 8中引入了Optional类来解决 NullPointerException 与繁琐的 null 检查。它是一个封装值的类，用于保存类型为T的值，从本质上说它就是一个容器。
变量存在时，Optional类只是对类简单封装。变量不存在时，缺失的值会被建模成一个“空” 的Optional对象，由方法Optional.empty()返回。那null和 Optional.empty()的区别在哪呢？从语义上，可以把它们当作一回事儿，但是实际中它们之间的差别非常大：如果尝试解引用一个null， 一定会触发NullPointerException，而使用Optional.empty()就完全没事，它是 Optional类的一个有效对象。
创建 Optional 对象 空Optional 可以通过静态工厂方法 Optional.empty，创建一个空的 Optional 对象：
1Optional&amp;lt;Car&amp;gt; option = Optional.empty(); 因为 empty() 本身代表的就是空对象，所以调用 get 方法会抛出 NoSuchElementException 异常。
非空Optional 可以使用静态工厂方法 Optional.of，依据一个非空值创建一个 Optional 对象：
1Optional&amp;lt;Car&amp;gt; optional = Optional.of(car); 如果 car 是一个 null，这段代码会立即抛出一个 NullPointerException，而不是等到试图访问car的属性值时才返回一个错误。
可为null的Optional 使用静态工厂方法 Optional.ofNullable，可以创建一个允许 null 值的 Optional 对象：
1Optional&amp;lt;Car&amp;gt; optional = Optional.ofNullable(car); 如果 car 是 null，那么得到的 Optional 对象就是个空对象。我们可以查看一下它的实现原理：
1public static &amp;lt;T&amp;gt; Optional&amp;lt;T&amp;gt; ofNullable(T value) { 2 return value == null ?</description>
    </item>
    
  </channel>
</rss>
