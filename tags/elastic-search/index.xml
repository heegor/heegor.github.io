<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>保罗札记 – Elastic Search</title>
    <link>http://localhost:1313/tags/elastic-search/</link>
    <description>Recent content in Elastic Search on 保罗札记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 22 Dec 2023 21:01:00 +0800</lastBuildDate>
    
	  <atom:link href="http://localhost:1313/tags/elastic-search/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>数据查询ES设计演变</title>
      <link>http://localhost:1313/blog/2023/12/es-order-search-evolution/</link>
      <pubDate>Fri, 22 Dec 2023 21:01:00 +0800</pubDate>
      
      <guid>http://localhost:1313/blog/2023/12/es-order-search-evolution/</guid>
      <description>
        
        
        &lt;p&gt;这里总结一下过去曾参与的一个系统中，对于订单查询设计的演变过程&lt;/p&gt;
&lt;h2&gt;第一阶段：仅数据库查询&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;第一阶段仅数据库查询&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e7%ac%ac%e4%b8%80%e9%98%b6%e6%ae%b5%e4%bb%85%e6%95%b0%e6%8d%ae%e5%ba%93%e6%9f%a5%e8%af%a2&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这个是最初始的阶段，数据查询直接走数据库查询。这种方式会完全依赖于数据库的性能，随着数据越来越来，查询效率也会越来越低&lt;/p&gt;
&lt;h2&gt;第二阶段：hibernate 拦截器检测数据变化并更新 ES&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;第二阶段hibernate-拦截器检测数据变化并更新-es&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e7%ac%ac%e4%ba%8c%e9%98%b6%e6%ae%b5hibernate-%e6%8b%a6%e6%88%aa%e5%99%a8%e6%a3%80%e6%b5%8b%e6%95%b0%e6%8d%ae%e5%8f%98%e5%8c%96%e5%b9%b6%e6%9b%b4%e6%96%b0-es&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;随着订单数据量的增多，原先直接查询数据库的方式已经无法满足对性能的要求。因此引入了 Elastic Search 来作为快速订单查询这个功能的支撑，同时增加了一个ES查询服务，用来对ES做读写操作。&lt;/p&gt;
&lt;p&gt;考虑到某些租户的数据量很小，直接查询数据库就满足业务上的客户端响应需求。因此，增加了一个租户级别上的配置，用来开启或者关闭 ES 查询。&lt;/p&gt;
&lt;h3&gt;写 ES&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;写-es&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%86%99-es&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/p/2023/12/es-order-search-evolution_s2w.jpg&#34; alt=&#34;hibernate拦截器检测数据变化并更新ES&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;由于这个系统使用的是 hibernate 来做数据的持久化，因此添加了一个 hibernate 拦截器，用来监听数据持久化的事件，根据不同的数据变更操作（新增、更新或删除），在 Elastic Search 中做不同的处理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果是在数据库中新增一个订单， 则在 ES 中创建一个文档&lt;/li&gt;
&lt;li&gt;如果是在数据库中更新一个订单， 则在 ES 中更新对应文档&lt;/li&gt;
&lt;li&gt;如果是在数据库中删除一个订单， 则在 ES 中删除对应文档&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果租户没有开启 ES 查询，那么订单数据更新的时候，也不会写 ES 数据，这样就可以节省存储资源。&lt;/p&gt;
&lt;h3&gt;读 ES&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;读-es&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e8%af%bb-es&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/p/2023/12/es-order-search-evolution_s2r.jpg&#34; alt=&#34;获取订单数据&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在读取订单数据的时候，会先判断某个租户是否开启了 ES 查询，如果未开启就查数据库，开启则通过 ES 查询服务来获取订单数据。&lt;/p&gt;
&lt;h3&gt;存在的问题&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;存在的问题&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%ad%98%e5%9c%a8%e7%9a%84%e9%97%ae%e9%a2%98&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;利用 ES 查询，响应速度明显得到提升。但是在实际的运行过程中，发现了另外一个问题：应用如果重启（比如新迭代发布），有些在内存中未处理的数据就无法同步到 ES，这就导致 ES 中的数据没有及时更新。&lt;/p&gt;
&lt;h2&gt;第三阶段：引入 Kafka&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;第三阶段引入-kafka&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e7%ac%ac%e4%b8%89%e9%98%b6%e6%ae%b5%e5%bc%95%e5%85%a5-kafka&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;引入消息队列中间件可以解决上面的问题，将保证消息消费的任务交给中间件，而不需要在业务应用上实现这个功能。&lt;/p&gt;
&lt;h3&gt;写 ES&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;写-es-1&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%86%99-es-1&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/p/2023/12/es-order-search-evolution_s3w.jpg&#34; alt=&#34;通过kafka写数据&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;与原先的方案相比，做了一些改动。hibernate 拦截器检测到订单数据变化后，将数据先写入到 Kafka，然后订单的 ES 查询服务去消费 kafka 的数据。&lt;/p&gt;
&lt;p&gt;写入到 kafka 的数据与原先也有些变化。原先的方案中，将变更的数据与操作类型都作为参数，ES 查询服务直接根据这些参数修改 ES 中的文档数据。新的方案中，kafka 中只放租户 ID 与订单 ID，通过这两个参数查询数据库来获取信息，如果数据库中没有数据，则表示订单被删除，就删除 ES 中的文档；如果数据库中有数据，则创建或者更新ES 文档。这么做的好处就是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kafka 中的数据少&lt;/li&gt;
&lt;li&gt;不用关心对数据进行了什么操作，不需要为增删改分开写逻辑，都合并为一个逻辑，就是查询数据库，根据查询结果来来处理。这样就简化了代码逻辑&lt;/li&gt;
&lt;li&gt;如果将来 ES 索引中需要增加新的字段，只需要修改查询数据库的 SQL 与写 ES 这两个部分的代码即可，降低了一些复杂度。另外，通过订单 ID 来查询数据库，本身的耗时也不会有多少。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;读 ES&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;读-es-1&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e8%af%bb-es-1&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这个部分没有变化&lt;/p&gt;
&lt;h2&gt;第四阶段：按照租户拆分成不同的索引&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;第四阶段按照租户拆分成不同的索引&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e7%ac%ac%e5%9b%9b%e9%98%b6%e6%ae%b5%e6%8c%89%e7%85%a7%e7%a7%9f%e6%88%b7%e6%8b%86%e5%88%86%e6%88%90%e4%b8%8d%e5%90%8c%e7%9a%84%e7%b4%a2%e5%bc%95&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;公司的业务与系统设计，订单数据增长是非常快的。随着租户数量、业务量的增加，ES 索引中的文档数量越来越多，ES 查询也越来越慢。原先的方案里面，所有的租户数据都是放在一个 ES 索引里面的。因此需要将数据做拆分，不同租户的数据，放在不同的 ES 索引中&lt;/p&gt;
&lt;h3&gt;写 ES&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;写-es-2&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%86%99-es-2&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/p/2023/12/es-order-search-evolution_s4w.jpg&#34; alt=&#34;不同租户写入不同索引&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;写数据的时候，根据租户 ID, 写入不同的 ES 索引。&lt;/p&gt;
&lt;h3&gt;读 ES&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;读-es-2&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e8%af%bb-es-2&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;读数据的时候，也是根据租户 ID，从不同的 ES 索引中读取&lt;/p&gt;
&lt;h2&gt;第五阶段：拆分搜索服务&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;第五阶段拆分搜索服务&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e7%ac%ac%e4%ba%94%e9%98%b6%e6%ae%b5%e6%8b%86%e5%88%86%e6%90%9c%e7%b4%a2%e6%9c%8d%e5%8a%a1&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;采用上面的方案，运行起来基本上已经没有问题了。只是从保持系统功能的稳定，与运维的角度来看，把原先 ES 同步服务拆分成下面三个，让每个服务专注于自己的事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;订单查询 (order-es-search)：这个服务仅包含查询的逻辑。因为查询功能在较长时间内会保持稳定，将这个功能独立拆分出来是为了保持查询服务的高可用。其他部分功能的更新与重新部署，就与它无关了。&lt;/li&gt;
&lt;li&gt;订单增量同步（order-es-sync）：这个服务是用来消费 kafka 消息，增量同步订单数据到 ES 中，仅处理最新变更的订单&lt;/li&gt;
&lt;li&gt;订单全量同步 (order-es-reload)：这个服务是用来重新同步某个租户的所有订单的。适用于 ES 索引中需要新增字段时，将已有的存量数据全部更新。在部署层面，它仅在需要的时候才临时启动，在平时都是不需要部署的。出需要的时候，临时部署，而且可以给它临时分配较高的硬件资源，加快处理速度，数据处理完后立即关闭服务，回收资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;写 ES&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;写-es-3&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%86%99-es-3&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/p/2023/12/es-order-search-evolution_s5w.jpg&#34; alt=&#34;拆分后写数据&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;读 ES&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;读-es-3&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e8%af%bb-es-3&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/p/2023/12/es-order-search-evolution_s5r.jpg&#34; alt=&#34;拆分后读数据&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>订单ES查询性能优化</title>
      <link>http://localhost:1313/blog/2021/02/es_search_improvement/</link>
      <pubDate>Sat, 20 Feb 2021 13:12:00 +0800</pubDate>
      
      <guid>http://localhost:1313/blog/2021/02/es_search_improvement/</guid>
      <description>
        
        
        &lt;h2&gt;背景&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;背景&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e8%83%8c%e6%99%af&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;由于系统中的订单量大，一些查询语句需要级联多张表来查询，单纯靠数据库的索引已经无法满足查询速度与用户界面响应速度的要求，因此在5年前引入了ES来加快查询速度。但是，原先的方案中ES存放的是全量的订单数据，并且是存放在同一个数据库索引中，随着业务的发展与订单量的累积，ES查询的速度已经越来越慢。通过Grafana监控数据，可以看到单个索引的数据量已达到1.5TB，主要的性能指标越来越差。ES的CPU使用率不时地大于80%，甚至100%，导致极端情况下ES查询耗时十几秒。对于用户的直观感受就是，在界面上面查询数据，需要耗时很久才能看到数据。&lt;/p&gt;
&lt;h2&gt;解决方案&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;解决方案&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;系统总是慢慢演变的，某个时间点的解决方案都是基于当前的一些情况，满足近3年内的需求就足够了。考虑到成本问题，尽可能在不增加硬件投入的情况下，找到节省时间的优化方案。&lt;/p&gt;
&lt;p&gt;在原先的方案中，索引中有1.5TB的数据量。从1.5TB的数据集里面查找数据，会很耗时间。由于系统中大部分的操作都是根据公司来区分的，所以如果把ES里面的数据，按照公司来拆分成不同的索引，某个公司查询订单的时候，仅仅查询它自己公司的索引。拆分成若干个索引之后，最大的一个索引不到3GB，小的一些索引就100多MB。由于单个公司索引的数据量很小，查询速度自然就比原先快了。&lt;/p&gt;
&lt;p&gt;系统中也存在一些查询，需要跨公司来查数据，但是这些查询有个特点，它们仅仅需要查最近一定时间范围内的数据，比如半年之内。对于这些数据，可以再专门建一个ES索引来存放，同时有个后台的Job，定期删除过期的数据。这样，就可以控制该索引的总数据量在一定的范围之内，不会因为数据量多大的原因导致查询变慢。&lt;/p&gt;
&lt;p&gt;当然，在写代码实现的时候还需要考虑很多具体的问题，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改原先ES数据实时同步方案，支持根据公司ID写入到不同的索引&lt;/li&gt;
&lt;li&gt;修改原先ES数据全量加载方案，支持根据公司ID写入到不同的索引&lt;/li&gt;
&lt;li&gt;修改原先ES数据查询方案，支持根据公司ID从不同的索引读取数据&lt;/li&gt;
&lt;li&gt;修改ES查询相关设置参数的实现逻辑，比如某个公司是否开启ES，开启ES的走ES查询，不开启ES的走数据库查询。&lt;/li&gt;
&lt;li&gt;需要考虑到将来的扩展性，如何更合理的接口&lt;/li&gt;
&lt;li&gt;原先的java ES库的某些操作不支持显式指定index名称，需要继承该库中的一些类并重写方法&lt;/li&gt;
&lt;li&gt;在过渡阶段，让系统支持新旧两种的查询方式，不需要重启服务，仅通过修改配置就可以实现无缝切换。这样的话，如果由于新方案中，代码有bug，可以直接通过修改配置切换到旧的方式，bug修复后再切换成新的。等到新方案的上线一定的时间，稳定之后，再移除旧方案的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;优化前后的性能对比&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;优化前后的性能对比&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e4%bc%98%e5%8c%96%e5%89%8d%e5%90%8e%e7%9a%84%e6%80%a7%e8%83%bd%e5%af%b9%e6%af%94&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;通过Grafana的监控数据，可以很明显地看出优化的效果。&lt;/p&gt;
&lt;h3&gt;切换新旧方案的瞬间&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;切换新旧方案的瞬间&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%88%87%e6%8d%a2%e6%96%b0%e6%97%a7%e6%96%b9%e6%a1%88%e7%9a%84%e7%9e%ac%e9%97%b4&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;切换新旧方案的瞬间，可以看到查询耗时断崖式减少&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/p/2021/02/turn-on-es.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;平峰时期CPU使用率对比&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;平峰时期cpu使用率对比&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%b9%b3%e5%b3%b0%e6%97%b6%e6%9c%9fcpu%e4%bd%bf%e7%94%a8%e7%8e%87%e5%af%b9%e6%af%94&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;优化前平均40%左右&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/p/2021/02/before_es_cpu_regular_time.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;优化后平均5%&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/p/2021/02/after_es_cpu_regular_time.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;高峰时期CPU使用率对比&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;高峰时期cpu使用率对比&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e9%ab%98%e5%b3%b0%e6%97%b6%e6%9c%9fcpu%e4%bd%bf%e7%94%a8%e7%8e%87%e5%af%b9%e6%af%94&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;优化前平均82%，最高98%&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/p/2021/02/before_es_cpu_peak_time.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;优化后平均15%&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/p/2021/02/after_es_cpu_peak_time.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;平峰时期查询耗时对比&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;平峰时期查询耗时对比&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%b9%b3%e5%b3%b0%e6%97%b6%e6%9c%9f%e6%9f%a5%e8%af%a2%e8%80%97%e6%97%b6%e5%af%b9%e6%af%94&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;优化前平均3.2s&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/p/2021/02/before_es_query_regular_time.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;优化后9ms&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/p/2021/02/after_es_query_regular_time.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;高峰时期查询耗时对比&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;高峰时期查询耗时对比&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e9%ab%98%e5%b3%b0%e6%97%b6%e6%9c%9f%e6%9f%a5%e8%af%a2%e8%80%97%e6%97%b6%e5%af%b9%e6%af%94&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;优化前平均7.8s，最高13.24s&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/p/2021/02/before_es_query_peak_time.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;优化后平均32ms&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/p/2021/02/after_es_query_peak_time.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Elastic Search vm.max_map_count too low 错误</title>
      <link>http://localhost:1313/blog/2020/11/es_max_map_count_error/</link>
      <pubDate>Thu, 19 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2020/11/es_max_map_count_error/</guid>
      <description>
        
        
        &lt;p&gt;在启动elastic search的时候，在启动日志看到下面的错误提示&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Max virtual memory areas vm.max_map_count &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;65530&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; is too low, increase to at least &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;262144&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;解决这个问题，有两个办法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;临时的，仅当前会话窗口有效
执行下面命令&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sysctl -w vm.max_map_count&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;262144&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;然后启动elastic search&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;永久生效&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;编辑/etc/sysctl.conf, 添加或者修改下面参数：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vm.max_map_count&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;262144&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;重启系统，或者执行下面命令加载参数：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sysctl --system &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;

      </description>
    </item>
    
  </channel>
</rss>
