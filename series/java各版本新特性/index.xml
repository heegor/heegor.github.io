<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java各版本新特性 on 保罗札记</title>
    <link>https://www.zengxi.net/series/java%E5%90%84%E7%89%88%E6%9C%AC%E6%96%B0%E7%89%B9%E6%80%A7/</link>
    <description>Recent content in Java各版本新特性 on 保罗札记</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Wed, 07 Apr 2021 13:01:00 +0800</lastBuildDate><atom:link href="https://www.zengxi.net/series/java%E5%90%84%E7%89%88%E6%9C%AC%E6%96%B0%E7%89%B9%E6%80%A7/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java 8新特性 - (3)方法引用</title>
      <link>https://www.zengxi.net/2021/04/java8_method_references/</link>
      <pubDate>Wed, 07 Apr 2021 13:01:00 +0800</pubDate>
      
      <guid>https://www.zengxi.net/2021/04/java8_method_references/</guid>
      <description>方法引用（Method references）。方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。与lambda联合使用，可以使语言的构造更紧凑简洁，减少冗余代码。
方法引用使用到的操作符“::”，这个操作符把方法引用分成两边，左边是类名或者某个对象的引用，右边是方法名。引用方法有下面几种方式：
 对象引用::实例方法名 类名::静态方法名 类名::实例方法名 类名::new 类型[]::new  对象引用::实例方法名 创建了一个PersonCompare对象，调用了其内部的compareByName实例方法。
1public class PersonCompare { 2 public int compareByName(Person a, Person b) { 3 return a.getName().compareTo(b.getName()); 4 } 5 public int compareByAge(Person a, Person b) { 6 return a.getBirthday().compareTo(b.getBirthday()); 7 } 8 @Test 9 public void test(){ 10 Person[] pArr = new Person[]{ 11 new Person(&amp;#34;1&amp;#34;, LocalDate.of(2019, 12, 1)), 12 new Person(&amp;#34;2&amp;#34;, LocalDate.of(2019, 12, 2)), 13 new Person(&amp;#34;3&amp;#34;, LocalDate.</description>
    </item>
    
    <item>
      <title>Java 8新特性 - (2)Stream API</title>
      <link>https://www.zengxi.net/2021/03/java8_stream_api/</link>
      <pubDate>Fri, 05 Mar 2021 12:56:00 +0800</pubDate>
      
      <guid>https://www.zengxi.net/2021/03/java8_stream_api/</guid>
      <description>什么是Stream API Stream API让开发者能够以一种声明的方式处理数据源（集合、数组等），它专注于对数据源进行各种高效的聚合操作（aggregate operation）和大批量数据操作 (bulk data operation)。
Stream API将处理的数据源看做一种Stream（流），Stream（流）在Pipeline（管道）中传输和运算，支持的运算包含筛选、排序、聚合等，当到达终点后便得到最终的处理结果。如果说集合讲的的数据，那么流讲的就是计算！
几个关键概念：
 元素: Stream是一个来自数据源的元素队列，Stream本身并不存储元素。 数据源: 即Stream的来源, 包含集合、数组、I/O channel、generator（发生器）等。 聚合操作: 类似SQL中的filter、map、find、match、sorted等操作 管道运算: Stream在Pipeline中运算后返回Stream对象本身，这样多个操作串联成一个Pipeline，并形成fluent风格的代码。这种方式可以优化操作，如延迟执行(laziness)和短路( short-circuiting)。 内部迭代: 不同于java 8以前对集合的遍历方式（外部迭代），Stream API采用访问者模式（Visitor）实现了内部迭代。 并行运算: Stream API支持串行（stream()）或并行（parallelStream()）的两种操作方式。  特点：
 Stream API的使用和同样是java8新特性的lambda表达式密不可分，可以大大提高编码效率和代码可读性。 Stream API提供串行和并行两种操作，其中并行操作能发挥多核处理器的优势，使用fork/join的方式进行并行操作以提高运行速度。 Stream API进行并行操作无需编写多线程代码即可写出高效的并发程序，且通常可避免多线程代码出错的问题。  注意：
 Stream 自己不会存储元素。 Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。 Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。  Stream操作的三个步骤  创建Stream：一个数据源（如： 集合、数组）， 获取一个流。 中间操作:一个中间操作链，对数据源的数据进行处理。 终止操作(终端操作):一个终止操作，执行中间操作链，并产生结果。  创建Stream (1) 获取Stream Java 8中Collection接口被扩展，提供两种获取流的方法:
 stream() 返回一个顺序流 parallelStream()返回一个并行流  1default Stream stream() // 返回一个顺序流 2 3default Stream parallelStream() // 返回一个并行流 1List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(); 2 3// 顺序流 4Stream&amp;lt;String&amp;gt; stream1 = list.</description>
    </item>
    
    <item>
      <title>Java 8新特性 - (1)Lambda表达式</title>
      <link>https://www.zengxi.net/2021/02/java8_lambda/</link>
      <pubDate>Thu, 25 Feb 2021 13:15:00 +0800</pubDate>
      
      <guid>https://www.zengxi.net/2021/02/java8_lambda/</guid>
      <description>为什么Java需要Lambda表达式? 在函数式编程语言中，函数是一等公民，它们可以独立存在，你可以将其赋值给一个变量，或将他们当做参数传给其他函数。JavaScript是最典型的函数式编程语言。函数式语言提供了一种强大的功能——闭包，相比于传统的编程方法有很多优势，闭包是一个可调用的对象，它记录了一些信息，这些信息来自于创建它的作用域。
Java现在提供的最接近闭包的概念便是Lambda表达式，虽然闭包与Lambda表达式之间存在显著差别，但至少Lambda表达式是闭包很好的替代者。
Lambda表达式为Java添加了缺失的函数式编程特点，它与闭包不同，但是又无限地接近闭包。在支持一类函数的语言中，Lambda 表达式的类型将是函数。但是，在Java中，Lambda表达式是对象，他们必须依附于一类特别的对象类型——函数式接口(functional interface)。
语法 Java中的Lambda表达式通常使用 (argument) -&amp;gt; (body) 语法书写，例如：
1(arg1, arg2...) -&amp;gt; { body } 2 3(type1 arg1, type2 arg2...) -&amp;gt; { body } 下面是一些例子:
1(int a, int b) -&amp;gt; { return a + b; } 2 3() -&amp;gt; System.out.println(&amp;#34;Hello World&amp;#34;); 4 5(String s) -&amp;gt; { System.out.println(s); } 6 7() -&amp;gt; 42 8 9() -&amp;gt; { return 3.1415 }; Lambda表达式的结构:
 一个 Lambda 表达式可以有零个或多个参数 参数的类型既可以明确声明，也可以根据上下文来推断。例如：(int a)与(a)效果相同 所有参数需包含在圆括号内，参数之间用逗号相隔。例如：(a, b) 或 (int a, int b) 或 (String a, int b, float c) 空圆括号代表参数集为空。例如：() -&amp;gt; 42 当只有一个参数，且其类型可推导时，圆括号（）可省略。例如：a -&amp;gt; return a*a Lambda 表达式的主体可包含零条或多条语句 如果 Lambda 表达式的主体只有一条语句，花括号{}可省略。匿名函数的返回类型与该主体表达式一致 如果 Lambda 表达式的主体包含一条以上语句，则表达式必须包含在花括号{}中（形成代码块）。匿名函数的返回类型与代码块的返回类型一致，若没有返回则为空  函数式接口 在Java中，Marker（标记）类型的接口是一种没有方法或属性声明的接口，也就是空接口。相似地，函数式接口是只包含一个抽象方法声明的接口。比如java.</description>
    </item>
    
    <item>
      <title>Java 7新特性 - (1)Java语法特性</title>
      <link>https://www.zengxi.net/2021/02/java7_gramma_new_features/</link>
      <pubDate>Wed, 24 Feb 2021 13:33:00 +0800</pubDate>
      
      <guid>https://www.zengxi.net/2021/02/java7_gramma_new_features/</guid>
      <description>二进制数字表达方式 在Java 7之前，支持十进制（123）、八进制（0123）、十六进制（0X12AB）的表示形式。Java 7中增加支持二进制的表示（0B11110001、0b11110001）
1int binary = 0b0001_1001; 2System.out.println(&amp;#34;binary is :&amp;#34; + binary); 输出
1binary is :25 使用下划线对数字进行分隔表达 Java 7中支持在数字中间增加&#39;_&#39;作为分隔符，分隔长int以及long（也支持double,float），显示更直观，如（12_123_456）。
下划线只能在数字中间，编译时编译器自动删除数字中的下划线。
1int intOne = 1_000_000; 2long longOne = 1_000_000; 3double doubleOne = 1_000_000; 4float floatOne = 1_000_000; switch 语句支持字符串变量 之前在switch中只能使用number或enum，Java 7开始支持string。
1String s = &amp;#34;a&amp;#34;; 2switch (s) { 3 case &amp;#34;a&amp;#34;: 4 System.out.println(&amp;#34;is a&amp;#34;); 5 break; 6 case &amp;#34;b&amp;#34;: 7 System.out.println(&amp;#34;is b&amp;#34;); 8 break; 9 default: 10 System.out.println(&amp;#34;is c&amp;#34;); 11 break; 12} 泛型实例创建的类型推断 运用泛型实例化类型自动推断，对通用实例创建(diamond)的type引用进行了改进，语法更加简洁</description>
    </item>
    
  </channel>
</rss>
