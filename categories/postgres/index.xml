<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Postgres on 保罗札记</title>
    <link>https://www.zengxi.net/categories/postgres/</link>
    <description>Recent content in Postgres on 保罗札记</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Tue, 27 Oct 2020 08:23:45 +0000</lastBuildDate><atom:link href="https://www.zengxi.net/categories/postgres/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ubuntu安装Postgres</title>
      <link>https://www.zengxi.net/posts/2020/10/ubuntu_install_postgresql/</link>
      <pubDate>Tue, 27 Oct 2020 08:23:45 +0000</pubDate>
      
      <guid>https://www.zengxi.net/posts/2020/10/ubuntu_install_postgresql/</guid>
      <description>ubuntu自带的软件仓库可能没有最新的postgres，这就需要自己手动添加安装源，再安装
1# 添加安装源 2sudo sh -c &amp;#39;echo &amp;#34;deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main&amp;#34; &amp;gt; /etc/apt/sources.list.d/pgdg.list&amp;#39; 3 4# 导入key 5wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - 6 7# 更新软件列表 8sudo apt-get update 9 10# 查找相关的软件包 11sudo apt-cache search postgres 12 13# 安装 14sudo apt install &amp;lt;对应的软件名称&amp;gt;  参考：
 https://www.postgresql.org/download/linux/ubuntu/  </description>
    </item>
    
    <item>
      <title>Postgres启动时遇到只读文件系统的错误</title>
      <link>https://www.zengxi.net/posts/2020/09/postgres_startup_readonly_file_error/</link>
      <pubDate>Sun, 20 Sep 2020 20:23:45 +0000</pubDate>
      
      <guid>https://www.zengxi.net/posts/2020/09/postgres_startup_readonly_file_error/</guid>
      <description>问题与解决方法 公司内部私有云由于断电，机器没有正常关机，结果导致 Postgres 服务器启动时，报错
12020-09-09 07:22:15.296 UTC [3876] FATAL: could not remove old lock file &amp;#34;postmaster.pid&amp;#34;: Read-only file system 22020-09-09 07:22:15.296 UTC [3876] HINT: The file seems accidentally left over, but it could not be removed. Please remove the file by hand and try again. 3pg_ctl: could not start server 尝试执行下面命令去重新挂载磁盘目录
1mount -o remount -w /var/lib/postgresql/ 但是报错
1mount: /dev/vdb is write-protected but explicit `-w&amp;#39; flag given 尝试另外一个命令
1umount /dev/vdb 但是还是报错</description>
    </item>
    
    <item>
      <title>转: postgresql 查看单个表大小</title>
      <link>https://www.zengxi.net/posts/2020/06/pg_check_table_size/</link>
      <pubDate>Mon, 15 Jun 2020 10:35:08 +0000</pubDate>
      
      <guid>https://www.zengxi.net/posts/2020/06/pg_check_table_size/</guid>
      <description>原文链接：https://blog.csdn.net/kmust20093211/article/details/47616345
方法一 ，查某个表
1select pg_size_pretty(pg_relation_size(&amp;#39;table_name&amp;#39;)); 方法二 ，查出所有表并按大小排序
1SELECT 2table_schema || &amp;#39;.&amp;#39; || table_name 3AS table_full_name, pg_size_pretty(pg_total_relation_size(&amp;#39;&amp;#34;&amp;#39; ||table_schema || &amp;#39;&amp;#34;.&amp;#34;&amp;#39; || table_name || &amp;#39;&amp;#34;&amp;#39;)) AS size 4FROM 5information_schema.tables 6ORDER BY 7 pg_total_relation_size(&amp;#39;&amp;#34;&amp;#39; || table_schema || &amp;#39;&amp;#34;.&amp;#34;&amp;#39; || table_name || &amp;#39;&amp;#34;&amp;#39;) 8DESC limit 20; 方法三，查出所有表按大小排序并分离data与index
1SELECT 2 table_name, 3 pg_size_pretty(table_size) AS table_size, 4 pg_size_pretty(indexes_size) AS indexes_size, 5 pg_size_pretty(total_size) AS total_size 6FROM ( 7 SELECT 8 table_name, 9 pg_table_size(table_name) AS table_size, 10 pg_indexes_size(table_name) AS indexes_size, 11 pg_total_relation_size(table_name) AS total_size 12 FROM ( 13 SELECT (&amp;#39;&amp;#34;&amp;#39; || table_schema || &amp;#39;&amp;#34;.</description>
    </item>
    
    <item>
      <title>postgres增量备份工具：wal-e</title>
      <link>https://www.zengxi.net/posts/2020/06/pg_wale_continuous_archiving/</link>
      <pubDate>Tue, 09 Jun 2020 12:31:50 +0000</pubDate>
      
      <guid>https://www.zengxi.net/posts/2020/06/pg_wale_continuous_archiving/</guid>
      <description>wal-e这个工具可以用来给postgres数据库做基础备份与增量备份，这个对数据库容灾很有帮助。目前它支持将备份存储到AWS S3，Azure Blob Store与Google Storage等。
一些基本概念 Base Backup 也称为热备份，它不会中断PostgreSQL中任何事务。一旦启动了basebackup，它将等待一个checkpoint。如果到达了checkpoint，那么它将把整个数据目录复制到一个文件中。这些备份将会是replication或POINT IN TIME恢复的起点。通常，basebackup是不一致的，可能包含已经损坏的数据。这时，就需要用到WAL文件
WAL 通过WAL文件可以获得数据库内所有数据的变更。这些变更首先写入WAL文件，然后再对数据库进行实际性地写入 。因此被称作Write Ahead Log。
Consitent Backup Consitent Backup(一致性备份) = Base backup + WAL backup
WAL日志文件必须在还原基础备份之后再还原。还原WAL文件的相关命令，必须在recovery.conf的restore_command中设置
WAL-E中的一些命令  backup-push - 做基础备份 backup-fetch - 做还原基础备份 wal-push - 备份wal文件 wal-fetch - 还原wal文件  用法 大致的用法就是：
 主库  安装wal-e，在配置目录中指定备份需要存储的地址以及身份认证 新建crontab，调用backup-push定时做基础备份 修改postgres配置目录下的postgresql.conf中的配置，开启archive并指定archive命令备份wal文件   备库  安装wal-e，在配置目录中指定获取备份的地址以及身份认证 用backup-fetch还原一次基础备份 在postgres的数据目录下面，新增recovery.conf配置文件，里面指定了还原wal备份的命令    更多详细内容与配置，可以参考它的github项目：https://github.com/wal-e/wal-e/
 参考链接：
 https://github.com/wal-e/wal-e/ https://dba.stackexchange.com/questions/211416/postgresql-how-to-take-incremental-backup-with-wal-e/211422  </description>
    </item>
    
    <item>
      <title>Postgres关闭某个数据库关联的session</title>
      <link>https://www.zengxi.net/posts/2020/04/pg_close_session_remove_db/</link>
      <pubDate>Thu, 23 Apr 2020 10:10:07 +0000</pubDate>
      
      <guid>https://www.zengxi.net/posts/2020/04/pg_close_session_remove_db/</guid>
      <description>Postgres删除数据库的时候，报错：有其他用户正在使用该数据库，无法删除。这时，需要关闭这个数据库的相关的连接，然后再删除数据库
可以执行下面的命令来关闭连接：
1 SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname=&amp;#39;要删除的数据库名称&amp;#39; AND pid&amp;lt;&amp;gt;pg_backend_pid(); </description>
    </item>
    
    <item>
      <title>转: Postgres数据库DBA常用命令</title>
      <link>https://www.zengxi.net/posts/2020/01/postgres-frequently-used-commands/</link>
      <pubDate>Mon, 27 Jan 2020 21:22:07 +0000</pubDate>
      
      <guid>https://www.zengxi.net/posts/2020/01/postgres-frequently-used-commands/</guid>
      <description>原作者：廖学强 原文链接：点击这里   查看帮助命令
1DB=# help --总的帮助 2 3DB=# \h --SQL commands级的帮助 4 5DB=# \? --psql commands级的帮助 按列显示，类似mysql的\G
1DB=# \x 2 3Expanded display is on. 查看DB安装目录(最好root用户执行)
1find / -name initdb 查看有多少DB实例在运行(最好root用户执行)
1find / -name postgresql.conf 查看DB版本
1cat $PGDATA/PG_VERSION 2 3psql --version 4 5DB=# show server_version; 6 7DB=# select version(); 查看DB实例运行状态
1pg_ctl status 查看所有数据库
1psql –l --查看5432端口下面有多少个DB 2 3psql –p XX –l --查看XX端口下面有多少个DB 4 5DB=# \l 6 7DB=# select * from pg_database; 创建数据库</description>
    </item>
    
    <item>
      <title>重建基于pglogical逻辑复制的从库</title>
      <link>https://www.zengxi.net/posts/2019/12/pg-recreate-pglogical-slave/</link>
      <pubDate>Fri, 06 Dec 2019 21:48:18 +0000</pubDate>
      
      <guid>https://www.zengxi.net/posts/2019/12/pg-recreate-pglogical-slave/</guid>
      <description>《Postgres 9.x 升级至 10.x》一文中提到了使用pglogical逻辑复制升级。基于这种方式的升级有个缺点，就是主库的DDL发生改变的话，那么从库的复制就会有影响，可能需要重建从库来解决。
重建从库的步骤与之前创建逻辑复制有点类似，但是由于之前已经做过一些操作，所以相比之下，少了一些步骤。
从库中删除数据库，再创建一个空的数据库 由于表结构的改变，原先的数据都不能用了，需要重新同步。创建新的空数据库是最快的方式
从库中导入最新的表结构 在 provider 上导出结构数据
1sudo -iu postgres pg_dumpall --schema-only -f dump.sql 在 subscriber 上导入结构数据
1sudo -iu postgres psql -f dump.sql 从库上创建pglogical扩展 1mydb=# CREATE EXTENSION pglogical; 从库上创建逻辑复制节点 1-- host 填的是subscriber的IP 2mydb=# SELECT pglogical.create_node(node_name := &amp;#39;subscriber&amp;#39;, dsn := &amp;#39;host=10.1.10.22 port=5432 dbname=mydb&amp;#39;); 从库上创建逻辑复制订阅端 1-- host 填的是provider的IP 2mydb=# SELECT pglogical.create_subscription( subscription_name := &amp;#39;subscriber&amp;#39;, provider_dsn := &amp;#39;host=10.1.10.6 port=5432 dbname=mydb&amp;#39;); 在主库上检查复制状态 1select * from pg_stat_replication; </description>
    </item>
    
    <item>
      <title>Postgres 9.x 升级至 10.x</title>
      <link>https://www.zengxi.net/posts/2019/12/pg-upgrade-version/</link>
      <pubDate>Sun, 01 Dec 2019 21:31:18 +0000</pubDate>
      
      <guid>https://www.zengxi.net/posts/2019/12/pg-upgrade-version/</guid>
      <description>目前主要有两种升级方式，它们分别使用于不同的场景。
   升级方式 优点 缺点     pglogical逻辑复制升级 停机时间短 需提前准备从库，并搭建replication，在replication期间，需考虑DDL语句带来的影响。   pg_upgrade升级 不需要提前准备replication 升级完成后需检查index是否正常，并执行vacuum analyze，对于数据量较大的库，这可能耗时较长    逻辑复制升级 前提条件 所有表都必须有主键 可以用下面的语句来检查
1SELECT table_name 2 FROM information_schema.tables 3 WHERE (table_catalog, table_schema, table_name) NOT IN 4 (SELECT table_catalog, table_schema, table_name 5 FROM information_schema.table_constraints 6 WHERE constraint_type = &amp;#39;PRIMARY KEY&amp;#39;) 7 AND table_schema IN (&amp;#39;myschema&amp;#39;) super user无密码访问provider和subscriber 修改配置文件
1# prodvider 上配置允许 super user 从 subscriber 上访问 replication。 2# 假如 subscriber IP 是 10.</description>
    </item>
    
    <item>
      <title>设置Postgres数据库的默认schema</title>
      <link>https://www.zengxi.net/posts/2018/06/set-postgres-default-schema/</link>
      <pubDate>Fri, 15 Jun 2018 10:26:05 +0000</pubDate>
      
      <guid>https://www.zengxi.net/posts/2018/06/set-postgres-default-schema/</guid>
      <description>查看当前的schema
1SHOW search_path; 设置默认schema，仅对当前连接有效
1SET search_path TO your_schema; 设置默认schema，数据库级别，修改之后的所有连接都有效
1ALTER database &amp;#34;your_database&amp;#34; SET search_path TO your_schema; </description>
    </item>
    
  </channel>
</rss>
